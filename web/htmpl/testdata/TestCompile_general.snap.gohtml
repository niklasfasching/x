<noscript name="general/test-x-component/nodes-to-html">
  <x-component static=static-value mixed="foo-{{ .a }}-bar" dynamic="{{ .a }}">
    <slot name=a other-field=value-of-other-field>
      content of
      <b>
        slot a
      </b>
      value of parent a:
      {{ .a }}
      == value-of-a
    </slot>
    <div>
      remaining content of
    </div>
    <p>
      x-component at
    </p>
    the callsite
  </x-component>
</noscript>

<noscript name="general/test-x-component/compiled">
  {{with $_dot_43 := .}}
    {{with $ := (dict "slots" (list (dict "name" "a" "other-field" "value-of-other-field")) "static" "static-value" "mixed" (print "foo-" .a "-bar") "dynamic" .a)}}
      Each component must have a template; the html inside is what is inlined and rendered at each callsite.
      The attributes passed to the component are available as fields on dot, e.g.
      - static attributes:
      {{.static}}
      == static-value
      - mixed attributes: concatenated using print:
      {{.mixed}}
      == foo-value-of-a-bar
      - dynamic attributes:
      {{.dynamic}}
      == value-of-a
  
      In addition, slots from the call site are available as both variables and elements:
      - Both named slots:
      slots.a:
      {{with $_dot_43}}
        content of
        <b>
          slot a
        </b>
        value of parent a:
        {{.a}}
        == value-of-a
      {{end}}
      - And the rest:
      slots.rest:
      {{with $_dot_43}}
        <div>
          remaining content of
        </div>
        <p>
          x-component at
        </p>
        the callsite
      {{end}}
      range .slots:
      {{range .slots}}
        name:
        {{.name}}
        == a
        other-field:
        {{.otherField}}
        == value-of-other-field
      {{end}}
    {{end}}
  {{end}}
</noscript>

<noscript name="general/test-x-component/compiled:<x-component>">
  Each component must have a template; the html inside is what is inlined and rendered at each callsite.
      The attributes passed to the component are available as fields on dot, e.g.
      - static attributes:
  {{.static}}
  == static-value
      - mixed attributes: concatenated using print:
  {{.mixed}}
  == foo-value-of-a-bar
      - dynamic attributes:
  {{.dynamic}}
  == value-of-a
  
      In addition, slots from the call site are available as both variables and elements:
      - Both named slots:
      slots.a:
  {{.slots.a}}
  - And the rest:
      slots.rest:
  {{.slots.rest}}
  range .slots:
  {{range .slots}}
    name:
    {{.name}}
    == a
        other-field:
    {{.otherField}}
    == value-of-other-field
  {{end}}
</noscript>

<noscript name="general/test-x-component/executed">
  
    
      Each component must have a template; the html inside is what is inlined and rendered at each callsite.
      The attributes passed to the component are available as fields on dot, e.g.
      - static attributes:
      static-value
      == static-value
      - mixed attributes: concatenated using print:
      foo-value-of-a-bar
      == foo-value-of-a-bar
      - dynamic attributes:
      value-of-a
      == value-of-a
  
      In addition, slots from the call site are available as both variables and elements:
      - Both named slots:
      slots.a:
      
        content of
        <b>
          slot a
        </b>
        value of parent a:
        value-of-a
        == value-of-a
      
      - And the rest:
      slots.rest:
      
        <div>
          remaining content of
        </div>
        <p>
          x-component at
        </p>
        the callsite
      
      range .slots:
      
        name:
        a
        == a
        other-field:
        value-of-other-field
        == value-of-other-field
      
    
  
</noscript>
